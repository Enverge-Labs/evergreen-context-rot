import marimo

__generated_with = "0.14.7"
app = marimo.App(width="columns")


@app.cell(column=0)
def _():
    import marimo as mo

    return (mo,)


@app.cell
def _():
    from PIL import Image, ImageDraw, ImageFont

    return Image, ImageDraw, ImageFont


@app.cell
def _(Image, ImageDraw, ImageFont):
    def create_enverge_placeholder():
        """
        Create a placeholder image with Enverge color scheme.
        """
        # Enverge color scheme (based on green energy theme)
        # Dark background with green accents and white text
        background_color = "#ffffff"  # White
        primary_text_color = "#000000"  # Black
        accent_color = "#000000"
        secondary_text_color = "#aaaaaa"  # Light gray

        # Create image
        width, height = 789, 590
        image = Image.new("RGB", (width, height), background_color)
        draw = ImageDraw.Draw(image)

        try:
            main_font = ImageFont.truetype(
                "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 50
            )
        except (OSError, IOError):
            try:
                main_font = ImageFont.truetype("arial.ttf", 90)
            except (OSError, IOError):
                main_font = ImageFont.load_default()

        try:
            sub_font = ImageFont.truetype(
                "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 24
            )
        except (OSError, IOError):
            try:
                sub_font = ImageFont.truetype("arial.ttf", 24)
            except (OSError, IOError):
                sub_font = ImageFont.load_default()

        main_text = "Placeholder"

        # Get text dimensions for centering
        main_bbox = draw.textbbox((0, 0), main_text, font=main_font)
        main_text_width = main_bbox[2] - main_bbox[0]
        main_text_height = main_bbox[3] - main_bbox[1]

        # Position main text in center
        main_x = (width - main_text_width) // 2
        main_y = (
            height - main_text_height
        ) // 2 - 20  # Slightly above center to make room for subtext

        # Draw main text with green accent color
        draw.text((main_x, main_y), main_text, fill=accent_color, font=main_font)

        sub_text = "Follow the steps\nbelow to generate."

        # Get subtext dimensions for centering
        sub_bbox = draw.textbbox((0, 0), sub_text, font=sub_font)
        sub_text_width = sub_bbox[2] - sub_bbox[0]
        sub_text_height = sub_bbox[3] - sub_bbox[1]

        # Position subtext below main text
        sub_x = (width - sub_text_width) // 2
        sub_y = main_y + main_text_height + 30  # 30px gap below main text

        # Draw subtext with secondary color
        draw.text((sub_x, sub_y), sub_text, fill=secondary_text_color, font=sub_font)

        # Add a subtle border accent
        # Exact numbers are approximations, to align with the charts generated by matplotlib
        border_width = 1
        draw.rectangle(
            [60, 32, width - 18 // 2, height - 60 // 2],
            outline=accent_color,
            width=border_width,
        )

        return image

    return (create_enverge_placeholder,)


@app.cell
def _(create_enverge_placeholder):
    image = create_enverge_placeholder()
    return (image,)


@app.cell
def _(image):
    output_filename = "images/enverge_placeholder.png"
    image.save(output_filename)
    return (output_filename,)


@app.cell(column=1)
def _(mo, output_filename):
    mo.image(src=output_filename)
    return


if __name__ == "__main__":
    app.run()
